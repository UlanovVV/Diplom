import plotly.graph_objects as go
import plotly.express as px
import numpy as np
np.random.seed(1)


# –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–µ–π–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
N = 100
random_x = np.linspace(0, 1, N)
random_y0 = np.random.randn(N) + 8
random_y1 = np.random.randn(N)
random_y2 = np.random.randn(N) - 8

fig = go.Figure()
fig.add_trace(go.Scatter(x=random_x, y=random_y0,
                    mode='lines',
                    name='–õ–∏–Ω–∏—è',
                    line=dict(color='firebrick', width=2, dash='dot')))
fig.add_trace(go.Scatter(x=random_x, y=random_y1,
                    mode='lines+markers',
                    name='–õ–∏–Ω–∏—è –∏ –º–∞—Ä–∫–µ—Ä',
                    line=dict(color='#B734B7', width=2, dash='dash')))
fig.add_trace(go.Scatter(x=random_x, y=random_y2,
                    mode='markers',
                    name='–ú–∞—Ä–∫–µ—Ä'))
fig.update_layout(
    title='–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫',
    xaxis_title='0—Ö',
    yaxis_title='0—É',
    xaxis_tickangle=-45,
    template='plotly_white',
    margin=dict(l=40, r=40, t=60, b=40))
fig.show()


# –°–æ–∑–¥–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã

x0 = np.random.randn(500)
x1 = np.random.randn(500) + 1

gist = go.Figure()
gist.add_trace(go.Histogram(
    x=x0,
    histnorm='percent',
    name='date1',
    xbins=dict(
        start=-4.0,
        end=4.0,
        size=0.5
    ),
    marker_color='#EB68B5',
    opacity=0.5
))
gist.add_trace(go.Histogram(
    x=x1,
    histnorm='percent',
    name='date2',
    xbins=dict(
        start=-4.0,
        end=4,
        size=0.5
    ),
    marker_color='#330C53',
    opacity=0.5
))

gist.update_layout(
    title_text='–°–æ–∑–¥–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã',
    xaxis_title_text='0x',
    yaxis_title_text='0—É',
    bargap=0.2,     # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç–æ–ª–±—Ü–∞–º–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö 0—Ö
    bargroupgap=0.1     # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç–æ–ª–±—Ü–∞–º–∏ –≤ –æ–¥–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ 0—Ö
)

gist.show()


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ—Ö–º–µ—Ä–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞

z3d = np.linspace(0, 1, 100)
x3d = z3d * np.sin(25 * z3d)
y3d = z3d * np.cos(25 * z3d)

fig3d = go.Figure(data=[go.Scatter3d(
    x=x3d,
    y=y3d,
    z=z3d,
    mode='markers',
    marker=dict(
        size=10,
        color="#30C04C",
        colorscale='Viridis',
        opacity=0.7
    )
)])
fig3d.show()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–≤–∏–∂–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤

dvig = go.Figure(
    data=[go.Scatter(x=[0, 1], y=[0, 2])],
    layout=go.Layout(
        xaxis=dict(range=[0, 7], autorange=False),
        yaxis=dict(range=[0, 7], autorange=False),
        title=dict(text="–ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"),
        updatemenus=[dict(
            type="buttons",
            buttons=[dict(label="–ù–∞—á–∞—Ç—å",
                          method="animate",
                          args=[None])])]
    ),
    frames=[go.Frame(data=[go.Scatter(x=[1, 1], y=[1, 2])]),
            go.Frame(data=[go.Scatter(x=[1, 6], y=[1, 6])]),
            go.Frame(data=[go.Scatter(x=[3, 6], y=[5, 6])],
                     layout=go.Layout(title_text="–ö–æ–Ω–µ—á–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"))]
)

dvig.show()


# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–ª–∑—É–Ω–∫–æ–º

fig = go.Figure()

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
for step in np.arange(0, 5, 0.1):
    fig.add_trace(
        go.Scatter(
            visible=False,
            line=dict(color="#00CED1", width=6),
            name="ùúà = " + str(step),
            x=np.arange(0, 10, 0.01),
            y=np.sin(step * np.arange(0, 10, 0.01))))

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
fig.data[10].visible = True


# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–∑—É–Ω–∫–∞
steps = []
for i in range(len(fig.data)):
    step = dict(
        method="update",
        args=[{"visible": [False] * len(fig.data)},
              {"title": "–ü–æ–ª–∑—É–Ω–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —à–∞–≥: " + str(i)}],
    )
    step["args"][0]["visible"][i] = True
    steps.append(step)

sliders = [dict(
    active=10,
    currentvalue={"prefix": "–ß–∞—Å—Ç–æ—Ç–∞: "},
    pad={"t": 50},
    steps=steps
)]

fig.update_layout(
    sliders=sliders
)

fig.show()